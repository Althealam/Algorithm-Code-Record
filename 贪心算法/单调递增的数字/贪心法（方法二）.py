# 贪心法（精简版）
# 分析：
# 遍历数字时，如果发现第一位大于第二位，则将第一位减去1，并且将第二位取9（需要从后往前遍历，不能从前往后遍历）
# Eg：332
# 如果从前往后遍历，就会得到329（从前往后会出现错误）
# 如果从后往前遍历，就会得到229
# Eg：3132
# 1. 3122：此时遍历到i=3，3大于2，则将3减去1，并且需要将2变成9（这时候先不变，记录下来），记录flag=3
# 2. 3122：此时遍历到i=2，发现1小于2，符合要求
# 3. 2122：此时遍历到i=1，发现3大于1，则将3减去1，并且将1变成9（这时候先不变，记录下来），记录flag=1
# 4. 将flag=1后面的数字都变成9

# 时间复杂度：
# 1. 字符串转换：O(d)
# 2. 遍历字符串：O(d)
# 3. 字符串切片和拼接：O(d)
# 总体时间复杂度是O(d^2)

# 空间复杂度：
# 1. 字符串strn：O(d)
# 2. 拼接字符串：O(d)
# 总体空间复杂度O(d)

class Solution(object):
    def monotoneIncreasingDigits(self, n):
        """
        :type n: int
        :rtype: int
        """
        # 将整数转换为字符串
        strn=str(n)

        for i in range(len(strn)-1,0,-1):
            if strn[i-1]>strn[i]:
                strn=strn[:i-1]+str(int(strn[i-1])-1)+'9'*(len(strn)-i)
        return int(strn)
        

        