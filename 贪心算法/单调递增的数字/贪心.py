# 分析：
# 遍历数字时，如果发现第一位大于第二位，则将第一位减去1，并且将第二位取9（需要从后往前遍历，不能从前往后遍历）
# Eg：332
# 如果从前往后遍历，就会得到329（从前往后会出现错误）
# 如果从后往前遍历，就会得到229
# Eg：3132
# 1. 3122：此时遍历到i=3，3大于2，则将3减去1，并且需要将2变成9（这时候先不变，记录下来），记录flag=3
# 2. 3122：此时遍历到i=2，发现1小于2，符合要求
# 3. 2122：此时遍历到i=1，发现3大于1，则将3减去1，并且将1变成9（这时候先不变，记录下来），记录flag=1
# 4. 将flag=1后面的数字都变成9

# 时间复杂度：
# 1. 将整数转换为字符串：O(d)，d是数字n的位数
# 2. 从右往左更新字符串：O(d^2)
# 遍历字符串：O(d)
# 更新字符串：O(d)
# 3. 将flag位置之后的字符修改为9：O(d^2)
# 循环：O(d)
# 字符串切片和拼接操作：O(d)
# 总的时间复杂度：O(d^2)

# 空间复杂度：
# 1. 字符串strn的空间：O(d)
# 2. 其他辅助变量：O(1)
# 总的空间复杂度：O(d)

class Solution(object):
    def monotoneIncreasingDigits(self, n):
        """
        :type n: int
        :rtype: int
        """
        # 将整数转换为字符串
        strn=str(n)
        # flag用来标记赋值9从那里开始
        flag=len(strn) 
        
        # 从右往左遍历字符串
        for i in range(len(strn)-1,0,-1): # 表示开始位置为len(strn)-1，结束位置为0，每次都是从右往左走一个位置
            # 如果当前字符比前一个字符小，说明需要修改前一个字符
            if strn[i-1]>strn[i]:
                flag=i # 更新flag的值，记录需要修改为9的位置
                # 将前一个字符减去1，以保证递增性质
                strn=strn[:i-1]+str(int(strn[i-1])-1)+strn[i:]
        
        # 将flag位置及之后的字符都修改为9，以保证最大的递增数字
        for i in range(flag,len(strn)):
            strn=strn[:i]+'9'+strn[i+1:]
        
        # 将最终的字符串转换回整数并返回
        return int(strn)
            
        

        