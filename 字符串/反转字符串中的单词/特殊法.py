# 方法一：先删除空白，然后整个反转，最后单词反转
# 思路：先将完整的字符串进行反转，然后再对字符串内空格分开的小字符串进行反转
# 定义快指针用于获取符合题目要求的字母
# 定义慢指针，获取到符合要求的字母后更新的位置

# 时间复杂度：O(n)
# 空间复杂度：O(n)
# 创建了反转后的字符串、单词列表以及最终的结果字符串，这些需要额外的存储空间
class Solution(object):
    def reverseWords(self, s):
        """
        :type s: str
        :rtype: str
        """
        # 删除前后空白
        s=s.strip() # strip()方法需要遍历整个字符串以删除前后的空白字符
        # 反转整个字符串
        s=s[::-1] # 切票操作需要遍历整个字符串以创建一个新的反转字符串
        # 备注：字符串是不可变的，因此我们不能直接修改字符串中的单个字符
        # 想要反转一个字符串的时候，需要创建一个新的字符串
        # 切片操作可以用于反转字符串 [::-1]
        # [::-1]：
        # 第一个冒号：标志切片操作的开始，这里省略了起始索引，意味着从序列的开始取值
        # 第二个冒号：表示切票操作的结束，这里省略了结束索引，标识取到序列的末尾
        # -1：表示步长为-1，即反向取值
        
        # 将字符串拆分为单词，并且反转每个单词
        s=' '.join(word[::-1] for word in s.split())
        return s
